{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"wpm","text":""},{"location":"index.html#overview","title":"Overview","text":"<p><code>wpm</code> is a simple user process manager for Microsoft Windows 11 and above.</p> <p><code>wpm</code> allows you to start, stop and manage user-level background processes as defined in unit files. Unit files allow you to codify availability and dependency relationships between other processes, and allow you to configure process healthchecks with custom retry and back-off strategies.</p> <p><code>wpm</code> allows you to pin executables in your unit files to specific versions via remote package manifests, and provides a comprehensive collection of lifecycle hooks to customize behaviour on process start and shutdown.</p>"},{"location":"index.html#community","title":"Community","text":"<p>There is a Discord server available for <code>wpm</code>-related discussion, help, troubleshooting etc.</p> <p>There is a YouTube channel where I post <code>wpm</code> development videos, feature previews and release overviews. Subscribing to the channel (which is monetized as part of the YouTube Partner Program) and watching videos is a really simple and passive way to contribute financially to the development and maintenance of <code>wpm</code>.</p>"},{"location":"index.html#licensing-for-personal-use","title":"Licensing for Personal Use","text":"<p><code>wpm</code> is licensed under the Komorebi 2.0.0 license, which is a fork of the PolyForm Strict 1.0.0 license. On a high level this means that you are free to do whatever you want with <code>wpm</code> for personal use other than redistribution, or distribution of new works (i.e. hard-forks) based on the software.</p> <p>Anyone is free to make their own fork of <code>wpm</code> with changes intended either for personal use or for integration back upstream via pull requests.</p> <p>The Komorebi 2.0.0 License does not permit any kind of commercial use ( i.e. using <code>wpm</code> at work).</p>"},{"location":"index.html#sponsorship-for-personal-use","title":"Sponsorship for Personal Use","text":"<p><code>wpm</code> is a free and educational source project, and one that encourages you to make charitable donations if you find the software to be useful and have the financial means.</p> <p>I encourage you to make a charitable donation to the Palestine Children's Relief Fund or to contribute to a Gaza Funds campaign before you consider sponsoring me on GitHub.</p> <p>GitHub Sponsors is enabled for this project. Sponsors can claim custom roles on the Discord server, get shout-outs at the end of wpm-related videos on YouTube, and gain the ability to submit feature requests on the issue tracker.</p> <p>If you would like to tip or sponsor the project but are unable to use GitHub Sponsors, you may also sponsor through Ko-fi, or make an anonymous Bitcoin donation to <code>bc1qv73wzspc77k46uty4vp85x8sdp24mphvm58f6q</code>.</p>"},{"location":"index.html#licensing-for-commercial-use","title":"Licensing for Commercial Use","text":"<p>A dedicated Individual Commercial Use License is available for those who want to use <code>wpm</code> at work.</p> <p>The Individual Commerical Use License adds \u201cCommercial Use\u201d as a \u201cPermitted Use\u201d for the licensed individual only, for the duration of a valid paid license subscription only. All provisions and restrictions enumerated in the Komorebi License continue to apply.</p> <p>More information, pricing and purchase links for Individual Commercial Use Licenses can be found here.</p>"},{"location":"example.html","title":"Units","text":"<p>Unit files define everything that <code>wpm</code> needs to be able to manage a process. Below is a non-trivial unit file for komorebi which has been annotated to help explain the various configuration options available.</p> <ol> <li><code>Requires</code> is used to specify    dependency relationships between different processes. In this example,    <code>komorebi</code> depends on <code>whkd</code> and <code>kanata</code>, which means that if you attempt    to <code>wpmctl start komorebi</code>, <code>wpm</code> will check if <code>whkd</code> and <code>kanata</code> are both    healthy and running before it attempts to start <code>komorebi</code>.</li> <li><code>Resources</code> is used to provide    URLs to additional resources that the unit requires in order to run, such as    configuration files. The key given to each URL here can be used to reference    the cached location of the downloaded file on disk, for example, when    passing a configuration file as an argument or an environment variable.</li> <li><code>Kind</code> is used to tell <code>wpm</code>    if this process continues running when launched (<code>Simple</code>), runs and then    exits (<code>OneShot</code>), or runs and exits after forking a new process    (<code>Forking</code>).</li> <li>Every unit has a complete set of lifecycle hooks available    (<code>ExecStartPre</code>,    <code>ExecStartPost</code>,    <code>ExecStop</code>,    <code>ExecStopPost</code>) to    specify any preflight or cleanup tasks a process might require.</li> <li><code>Executable</code>    can reference either an binary in the system <code>$PATH</code>, a remote URL and    checksum hash, or a Scoop package manifest. Remote    binaries will be cached in a local store for future use, as will Scoop    packages. The latter two approaches can be used to pin binary dependencies    to exact versions (ie. enforcing service dependency consistency across a    team)</li> <li>Keys declared in <code>Resources</code> can    be referenced as arguments using the <code>Resources.KEY</code> syntax inside of double    curly braces.</li> <li><code>$USERPROFILE</code> will resolve to <code>C:\\Users\\&lt;YourUser&gt;</code> when used in    <code>Arguments</code> and <code>Environment</code></li> <li><code>Healthcheck</code> is used    to tell <code>wpm</code> how to validate the health of a process. This can be done by    invoking a command until it returns with a successful exit code, or by    checking the liveness of a process after a fixed period of time.</li> </ol> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/LGUG2Z/wpm/refs/heads/master/schema.unit.json\",\n  \"Unit\": {\n    \"Name\": \"komorebi\",\n    \"Description\": \"Tiling window management for Windows\",\n    // [1]\n    \"Requires\": [\"whkd\", \"kanata\"]\n  },\n  // [2]\n  \"Resources\": {\n    \"CONFIGURATION_FILE\": \"https://raw.githubusercontent.com/LGUG2Z/komorebi/refs/tags/v0.1.35/docs/komorebi.example.json\"\n  },\n  \"Service\": {\n    // [3]\n    \"Kind\": \"Simple\",\n    // [4]\n    \"ExecStartPre\": [\n      {\n        \"Executable\": \"komorebic.exe\",\n        \"Arguments\": [\"fetch-asc\"]\n      }\n    ],\n    \"ExecStart\": {\n      // [5]\n      \"Executable\": {\n        \"Package\": \"komorebi\",\n        \"Version\": \"0.1.35\",\n        \"Manifest\": \"https://raw.githubusercontent.com/ScoopInstaller/Extras/8e21dc2cd902b865d153e64a078d97d3cd0593f7/bucket/komorebi.json\",\n        \"Target\": \"komorebi.exe\"\n      },\n      \"Arguments\": [\n        \"--config\",\n        // [6]\n        \"{{ Resources.CONFIGURATION_FILE }}\"\n      ],\n      \"Environment\": [\n        [\n          \"KOMOREBI_CONFIG_HOME\",\n          // [7]\n          \"$USERPROFILE/.config/komorebi\"\n        ]\n      ]\n    },\n    // [4]\n    \"ExecStop\": [\n      {\n        \"Executable\": \"komorebic.exe\",\n        \"Arguments\": [\"stop\"]\n      }\n    ],\n    // [4]\n    \"ExecStopPost\": [\n      {\n        \"Executable\": \"komorebic.exe\",\n        \"Arguments\": [\"restore-windows\"]\n      }\n    ],\n    // [8]\n    \"Healthcheck\": {\n      \"Command\": {\n        \"Executable\": \"komorebic.exe\",\n        \"Arguments\": [\"state\"],\n        \"DelaySec\": 1\n      }\n    },\n    \"Restart\": \"Never\"\n  }\n}\n</code></pre>"},{"location":"installation.html","title":"Getting started","text":"<p><code>wpm</code> is a tiling window manager for Windows that is comprised of two main binaries, <code>wpmd.exe</code>, which contains the process management daemon itself, and <code>wpmctl.exe</code>, which is the main way to send commands to the process management daemon.</p>"},{"location":"installation.html#installation","title":"Installation","text":"<p><code>wpm</code> is available pre-built to install via Scoop and WinGet, and you may also build it from source if you would prefer.</p> <ul> <li>Scoop</li> <li>WinGet</li> <li>Building from source</li> <li>Offline</li> </ul>"},{"location":"installation.html#long-path-support","title":"Long path support","text":"<p>It is highly recommended that you enable support for long paths in Windows by running the following command in an Administrator Terminal before installing <code>wpm</code>.</p> <pre><code>Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1\n</code></pre>"},{"location":"installation.html#scoop","title":"Scoop","text":"<p>Make sure you have installed <code>scoop</code> and verified that installed binaries are available in your <code>$PATH</code> before proceeding.</p> <p>Issues with <code>wpm</code> and related commands not being recognized in the terminal ultimately come down to the <code>$PATH</code> environment variable not being correctly configured by your package manager and should not be raised as bugs or issues either on the <code>wpm</code> GitHub repository or Discord server.</p>"},{"location":"installation.html#install-wpm","title":"Install wpm","text":"<p>First add the extras bucket</p> <pre><code>scoop bucket add extras\n</code></pre> <p>Then install the <code>wpm</code> package using <code>scoop install</code></p> <pre><code>scoop install wpm\n</code></pre>"},{"location":"installation.html#winget","title":"WinGet","text":"<p>Make sure you have installed the latest version of <code>winget</code> and verified that installed binaries are available in your <code>$PATH</code> before proceeding.</p> <p>Issues with <code>wpmd</code> and related commands not being recognized in the terminal ultimately come down to the <code>$PATH</code> environment variable not being correctly configured by your package manager and should not be raised as bugs or issues either on the <code>wpm</code> GitHub repository or Discord server.</p>"},{"location":"installation.html#install-wpm_1","title":"Install wpm","text":"<p>Install the <code>wpm</code> packages using <code>winget install</code></p> <pre><code>winget install LGUG2Z.wpm\n</code></pre>"},{"location":"installation.html#building-from-source","title":"Building from source","text":"<p>Make sure you have installed <code>rustup</code>, a stable <code>rust</code> compiler toolchain, and the Visual Studio Visual Studio prerequisites.</p> <p>Clone the git repository, enter the directory, and build the following binaries:</p> <pre><code>cargo +stable install --path wpm --locked\ncargo +stable install --path wpmd --locked\n</code></pre> <p>If the binaries have been built and added to your <code>$PATH</code> correctly, you should see some output when running <code>wpmd --help</code> and <code>wpmctl --help</code></p>"},{"location":"installation.html#offline","title":"Offline","text":"<p>Download the latest wpm MSI installer on an internet-connected computer, then copy it to an offline machine to install.</p>"},{"location":"installation.html#upgrades","title":"Upgrades","text":"<p>Before upgrading, make sure that <code>wpmd</code> is stopped. This is to ensure that all the current <code>wpm</code>-related exe files can be replaced without issue.</p> <p>Then, depending on whether you installed via <code>scoop</code> or <code>winget</code>, you can run the appropriate command:</p> <pre><code># for winget\nwinget upgrade LGUG2Z.wpm\n</code></pre> <pre><code># for scoop\nscoop update wpm\n</code></pre>"},{"location":"installation.html#uninstallation","title":"Uninstallation","text":"<p>Before uninstalling, first ensure that <code>wpmd</code> is stopped.</p> <p>Then, depending on whether you installed with Scoop or WinGet, run <code>scoop uninstall wpm</code> or <code>winget uninstall LGUG2Z.wpm</code>.</p> <p>Finally, you can run the following commands in a PowerShell prompt to clean up files created by the <code>quickstart</code> command and any other runtime files:</p> <pre><code>rm -r -Force $Env:USERPROFILE\\.config\\wpm\nrm -r -Force $Env:LOCALAPPDATA\\wpm\n</code></pre>"},{"location":"tutorial.html","title":"Tutorial","text":"<p>For the tutorial, we will use <code>wpm</code> to set up a keyboard-focused desktop environment on a brand new virtual machine which uses <code>kanata</code> to enable QMK-style keyboard layers, <code>whkd</code> to enable programmable hotkeys, <code>komorebi</code> to enable tiling window management, and <code>komorebi-bar</code> as a status bar.</p> <p>One you have completed the tutorial, you should have a good idea of how <code>wpm</code> can be used to model and enforce constraints in use cases from customized desktops to complex local development environments and more.</p>"},{"location":"tutorial.html#create-a-new-virtual-machine","title":"Create a new Virtual Machine","text":"<ul> <li>Open Hyper-V Manager</li> <li>Select \"Quick Create\"</li> <li>Select \"Windows 11 dev environment\"</li> <li>Select \"Create Virtual Machine\"</li> </ul>"},{"location":"tutorial.html#install-scoop","title":"Install scoop","text":"<pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\nInvoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression\n</code></pre>"},{"location":"tutorial.html#install-wpm","title":"Install wpm","text":"<p>Install <code>scoop</code> and then install <code>wpm</code></p> <pre><code>scoop install git # need this to be able to add the extras bucket\n\nscoop bucket add extras\nscoop install wpm\n</code></pre>"},{"location":"tutorial.html#generate-example-units","title":"Generate example units","text":"<p>Generate some example unit files in <code>~/.config/wpm</code></p> <pre><code>wpmctl examplegen $(wpm units)\n</code></pre> <p>You can <code>ls</code> the directory to make sure they have been generated</p> <pre><code>PS C:\\Users\\User&gt; ls $(wpmctl units)\n\n\n    Directory: C:\\Users\\User\\.config\\wpm\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----          4/6/2025   3:02 PM            503 desktop.json\n-a----          4/6/2025   3:02 PM            883 kanata.json\n-a----          4/6/2025   3:02 PM           1032 komokana.json\n-a----          4/6/2025   3:02 PM           1026 komorebi-bar.json\n-a----          4/6/2025   3:02 PM           1417 komorebi.json\n-a----          4/6/2025   3:02 PM            971 mousemaster.json\n-a----          4/6/2025   3:02 PM            835 whkd.json\n</code></pre>"},{"location":"tutorial.html#start-wpmd","title":"Start <code>wpmd</code>","text":"<p>Run <code>wpmd</code> in terminal to start the process manager - this will automatically download all required packages and configuration files before starting to listen for commands</p> <pre><code>PS C:\\Users\\User&gt; wpmd\n2025-04-06T22:07:42.124299Z  INFO wpm::process_manager: desktop: registered unit\n2025-04-06T22:07:42.126354Z  INFO wpm::unit: kanata: adding resource C:\\Users\\User\\AppData\\Local\\wpm\\store\\gist.githubusercontent.com_LGUG2Z_bbafc51ddde2bd1462151cfcc3f7f489_raw_28e24c4a493166fa866ae24ebc4ed8df7f164bd1\\minimal.clj to store\n2025-04-06T22:07:42.207182Z  INFO wpm::unit: installing scoop manifest https://raw.githubusercontent.com/ScoopInstaller/Extras/8a6d8ff0f3963611ae61fd9f45ff36e3c321c8b5/bucket/kanata.json\nInstalling 'kanata' (1.8.1) [64bit] from 'https://raw.githubusercontent.com/ScoopInstaller/Extras/8a6d8ff0f3963611ae61fd9f45ff36e3c321c8b5/bucket/kanata.json'\nLoading kanata.exe from cache\nChecking hash of kanata.exe ... ok.\nLinking ~\\scoop\\apps\\kanata\\current =&gt; ~\\scoop\\apps\\kanata\\1.8.1\nCreating shim for 'kanata'.\n'kanata' (1.8.1) was installed successfully!\nNotes\n-----\nConfiguration Guide: https://github.com/jtroo/kanata/blob/main/docs/config.adoc\n\n2025-04-06T22:07:44.513651Z  INFO wpm::process_manager: kanata: registered unit\n2025-04-06T22:07:44.515218Z  INFO wpm::unit: komokana: adding resource C:\\Users\\User\\AppData\\Local\\wpm\\store\\raw.githubusercontent.com_LGUG2Z_komokana_refs_tags_v0.1.5\\komokana.example.yaml to store\n2025-04-06T22:07:44.592705Z  INFO wpm::unit: installing scoop manifest https://raw.githubusercontent.com/ScoopInstaller/Extras/e633292b4e1101273caac59ffcb4a7ce7ee7a2e8/bucket/komokana.json\nInstalling 'komokana' (0.1.5) [64bit] from 'https://raw.githubusercontent.com/ScoopInstaller/Extras/e633292b4e1101273caac59ffcb4a7ce7ee7a2e8/bucket/komokana.json'\nLoading komokana-0.1.5-x86_64-pc-windows-msvc.zip from cache\nChecking hash of komokana-0.1.5-x86_64-pc-windows-msvc.zip ... ok.\nExtracting komokana-0.1.5-x86_64-pc-windows-msvc.zip ... done.\nLinking ~\\scoop\\apps\\komokana\\current =&gt; ~\\scoop\\apps\\komokana\\0.1.5\nCreating shim for 'komokana'.\n'komokana' (0.1.5) was installed successfully!\n'komokana' suggests installing 'extras/komorebi'.\n\n2025-04-06T22:07:46.792651Z  INFO wpm::process_manager: komokana: registered unit\n2025-04-06T22:07:46.793421Z  INFO wpm::unit: komorebi-bar: adding resource C:\\Users\\User\\AppData\\Local\\wpm\\store\\raw.githubusercontent.com_LGUG2Z_komorebi_refs_tags_v0.1.35_docs\\komorebi.bar.example.json to store\n2025-04-06T22:07:46.820347Z  INFO wpm::unit: installing scoop manifest https://raw.githubusercontent.com/ScoopInstaller/Extras/8e21dc2cd902b865d153e64a078d97d3cd0593f7/bucket/komorebi.json\nInstalling 'komorebi' (0.1.35) [64bit] from 'https://raw.githubusercontent.com/ScoopInstaller/Extras/8e21dc2cd902b865d153e64a078d97d3cd0593f7/bucket/komorebi.json'\nLoading komorebi-0.1.35-x86_64-pc-windows-msvc.zip from cache\nChecking hash of komorebi-0.1.35-x86_64-pc-windows-msvc.zip ... ok.\nExtracting komorebi-0.1.35-x86_64-pc-windows-msvc.zip ... done.\nLinking ~\\scoop\\apps\\komorebi\\current =&gt; ~\\scoop\\apps\\komorebi\\0.1.35\nCreating shim for 'komorebi'.\nCreating shim for 'komorebic'.\nCreating shim for 'komorebic-no-console'.\nMaking C:\\Users\\User\\scoop\\shims\\komorebic-no-console.exe a GUI binary.\nCreating shim for 'komorebi-gui'.\nCreating shim for 'komorebi-bar'.\n'komorebi' (0.1.35) was installed successfully!\nNotes\n-----\nCheck out the quickstart guide on https://lgug2z.github.io/komorebi\n'komorebi' suggests installing 'extras/autohotkey'.\n'komorebi' suggests installing 'extras/whkd'.\n\n2025-04-06T22:07:49.420615Z  INFO wpm::process_manager: komorebi-bar: registered unit\n2025-04-06T22:07:49.421177Z  INFO wpm::unit: komorebi: adding resource C:\\Users\\User\\AppData\\Local\\wpm\\store\\raw.githubusercontent.com_LGUG2Z_komorebi_refs_tags_v0.1.35_docs\\komorebi.example.json to store\n2025-04-06T22:07:49.442994Z  INFO wpm::process_manager: komorebi: registered unit\n2025-04-06T22:07:49.443741Z  INFO wpm::unit: whkd: adding resource C:\\Users\\User\\AppData\\Local\\wpm\\store\\raw.githubusercontent.com_LGUG2Z_komorebi_refs_tags_v0.1.35_docs\\whkdrc.sample to store\n2025-04-06T22:07:49.470394Z  INFO wpm::unit: installing scoop manifest https://raw.githubusercontent.com/ScoopInstaller/Extras/112fd691392878f8c4e9e9703dde3d1d182941e3/bucket/whkd.json\nInstalling 'whkd' (0.2.7) [64bit] from 'https://raw.githubusercontent.com/ScoopInstaller/Extras/112fd691392878f8c4e9e9703dde3d1d182941e3/bucket/whkd.json'\nLoading whkd-0.2.7-x86_64-pc-windows-msvc.zip from cache\nChecking hash of whkd-0.2.7-x86_64-pc-windows-msvc.zip ... ok.\nExtracting whkd-0.2.7-x86_64-pc-windows-msvc.zip ... done.\nLinking ~\\scoop\\apps\\whkd\\current =&gt; ~\\scoop\\apps\\whkd\\0.2.7\nCreating shim for 'whkd'.\n'whkd' (0.2.7) was installed successfully!\n\n2025-04-06T22:07:51.580342Z  INFO wpm::process_manager: whkd: registered unit\n2025-04-06T22:07:51.580712Z  INFO wpmd: listening on wpmd.sock\n</code></pre>"},{"location":"tutorial.html#start-the-units","title":"Start the units","text":"<p>The dependency graph of our example units looks like this</p> <ul> <li><code>komorebi-bar</code> depends on <code>komorebi</code></li> <li><code>komorebi</code> depends on <code>whkd</code> and <code>kanata</code></li> </ul> <p>So we can run <code>wpmctl start komorebi-bar</code> to ensure that <code>whkd</code>, <code>kanata</code>, <code>komorebi</code> and <code>komorebi-bar</code> are all started and passing their healthchecks.</p> <pre><code>2025-04-06T22:12:26.419780Z  INFO wpmd: received socket message: Start([\"komorebi-bar\"])\n2025-04-06T22:12:26.420163Z  INFO wpmd: successfully queued socket message\n2025-04-06T22:12:26.420204Z  INFO wpm::process_manager: komorebi-bar: requires komorebi\n2025-04-06T22:12:26.420689Z  INFO wpm::process_manager: komorebi: requires whkd\n2025-04-06T22:12:26.421003Z  INFO wpm::unit: whkd: starting unit\n2025-04-06T22:12:26.424052Z  INFO wpm::unit: whkd: running pid 11716 liveness healthcheck (1s)\n2025-04-06T22:12:27.441812Z  INFO wpm::unit: whkd: passed healthcheck\n2025-04-06T22:12:27.442303Z  INFO wpm::process_manager: komorebi: requires kanata\n2025-04-06T22:12:27.442572Z  INFO wpm::unit: kanata: starting unit\n2025-04-06T22:12:27.446427Z  INFO wpm::unit: kanata: running pid 9520 liveness healthcheck (1s)\n2025-04-06T22:12:28.466568Z  INFO wpm::unit: kanata: passed healthcheck\n2025-04-06T22:12:28.466976Z  INFO wpm::unit: komorebi: starting unit\n2025-04-06T22:12:28.471147Z  INFO wpm::unit: komorebi: running command healthcheck - C:\\Users\\User\\scoop\\shims\\komorebic.exe state (1s)\n2025-04-06T22:12:29.503620Z  INFO wpm::unit: komorebi: passed healthcheck\n2025-04-06T22:12:29.503983Z  INFO wpm::unit: komorebi-bar: starting unit\n2025-04-06T22:12:29.507663Z  INFO wpm::unit: komorebi-bar: running pid 9860 liveness healthcheck (1s)\n2025-04-06T22:12:30.529935Z  INFO wpm::unit: komorebi-bar: passed healthcheck\n</code></pre>"},{"location":"tutorial.html#shutdown","title":"Shutdown","text":"<p>You can press <code>ctrl-c</code> on the terminal window running <code>wpmd</code> to trigger a shutdown, which will ensure that all processes started in the previous steps are shutdown cleanly with their shutdown hooks respected.</p> <pre><code>2025-04-06T22:20:02.303289Z  INFO wpm::process_manager: wpmd: shutting down process manager\n2025-04-06T22:20:02.303496Z  INFO wpm::process_manager: whkd: stopping unit\n2025-04-06T22:20:02.303622Z  INFO wpm::process_manager: whkd: sending kill signal to 70000\n2025-04-06T22:20:02.306467Z  INFO wpm::process_manager: whkd: process 70000 successfully terminated\n2025-04-06T22:20:02.306587Z  INFO wpm::process_manager: komorebi-bar: stopping unit\n2025-04-06T22:20:02.306714Z  INFO wpm::process_manager: komorebi-bar: sending kill signal to 40192\n2025-04-06T22:20:02.352968Z  INFO wpm::process_manager: komorebi-bar: process 40192 successfully terminated\n2025-04-06T22:20:02.356650Z  INFO wpm::process_manager: komorebi: stopping unit\n2025-04-06T22:20:02.356777Z  INFO wpm::process_manager: komorebi: executing shutdown command - C:\\Users\\User\\scoop\\shims\\komorebic.exe stop\n2025-04-06T22:20:02.453174Z  INFO wpm::unit: komorebi: executing cleanup command - C:\\Users\\User\\scoop\\shims\\komorebic.exe restore-windows\n2025-04-06T22:20:02.792875Z  INFO wpm::process_manager: komorebi: sending kill signal to 17448\n2025-04-06T22:20:02.793018Z  INFO wpm::process_manager: komorebi: process 17448 successfully terminated\n2025-04-06T22:20:02.793137Z  INFO wpm::process_manager: komorebi: executing cleanup command - C:\\Users\\User\\scoop\\shims\\komorebic.exe restore-windows\n2025-04-06T22:20:02.811672Z  INFO wpm::process_manager: kanata: stopping unit\n2025-04-06T22:20:02.811799Z  INFO wpm::process_manager: kanata: sending kill signal to 70136\n2025-04-06T22:20:02.814617Z  INFO wpm::process_manager: kanata: process 70136 successfully terminated\n</code></pre>"},{"location":"cli/log.html","title":"log","text":"<pre><code>Tail the logs of a unit or of the process manager\n\nUsage: wpmctl.exe log [UNIT]\n\nArguments:\n  [UNIT]\n          Target unit\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/rebuild.html","title":"rebuild","text":"<pre><code>Ensure all remote dependencies are downloaded and built\n\nUsage: wpmctl.exe rebuild\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/reload.html","title":"reload","text":"<pre><code>Reload all unit definitions\n\nUsage: wpmctl.exe reload\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/reset.html","title":"reset","text":"<pre><code>Reset units\n\nUsage: wpmctl.exe reset [UNITS]...\n\nArguments:\n  [UNITS]...\n          Target units\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/restart.html","title":"restart","text":"<pre><code>Restart units\n\nUsage: wpmctl.exe restart [UNITS]...\n\nArguments:\n  [UNITS]...\n          Target units\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/start.html","title":"start","text":"<pre><code>Start units\n\nUsage: wpmctl.exe start [UNITS]...\n\nArguments:\n  [UNITS]...\n          Target units\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/state.html","title":"state","text":"<pre><code>Show the state of the process manager\n\nUsage: wpmctl.exe state\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/status.html","title":"status","text":"<pre><code>Show status of a unit\n\nUsage: wpmctl.exe status &lt;UNIT&gt;\n\nArguments:\n  &lt;UNIT&gt;\n          Target unit\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/stop.html","title":"stop","text":"<pre><code>Stop units\n\nUsage: wpmctl.exe stop [UNITS]...\n\nArguments:\n  [UNITS]...\n          Target units\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"},{"location":"cli/units.html","title":"units","text":"<pre><code>Print the path to the wpm global unit definition directory\n\nUsage: wpmctl.exe units\n\nOptions:\n  -h, --help\n          Print help\n</code></pre>"}]}